// Generated by CoffeeScript 1.4.0
(function() {
  var $, Backbone, Drowsy, root, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    $ = window.$;
    _ = window._;
    Backbone = window.Backbone;
  } else {
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Backbone.$ = $;
  }

  Drowsy = (function() {

    function Drowsy() {}

    Drowsy.generateMongoObjectId = function() {
      var base, rand, randLength, time;
      base = 16;
      randLength = 13;
      time = (Date.now() * 1000).toString(base);
      rand = Math.ceil(Math.random() * (Math.pow(base, randLength) - 1)).toString(base);
      return time + (Array(randLength + 1).join("0") + rand).slice(-randLength);
    };

    return Drowsy;

  })();

  Drowsy.Server = (function() {

    function Server(url, options) {
      if (options == null) {
        options = {};
      }
      this.databases = __bind(this.databases, this);

      this.database = __bind(this.database, this);

      if (typeof url === 'object') {
        options = url;
      } else if (typeof url === 'string') {
        options.url = url;
      }
      this.options = options;
    }

    Server.prototype.url = function() {
      return this.options.url.replace(/\/$/, '');
    };

    Server.prototype.database = function(dbName) {
      return new Drowsy.Database(this, dbName);
    };

    Server.prototype.databases = function(after) {
      var _this = this;
      return Backbone.ajax({
        url: this.url(),
        success: function(data) {
          var dbName, dbs, _i, _len;
          dbs = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            dbName = data[_i];
            if (dbName.match(Drowsy.Database.VALID_DB_RX)) {
              dbs.push(_this.database(dbName));
            }
          }
          return after(dbs);
        }
      });
    };

    return Server;

  })();

  Drowsy.Database = (function() {

    Database.VALID_DB_RX = /[^\s\.\$\/\\\*]+/;

    function Database(server, dbName, options) {
      if (options == null) {
        options = {};
      }
      this.Collection = __bind(this.Collection, this);

      this.Document = __bind(this.Document, this);

      this.collections = __bind(this.collections, this);

      if (typeof server === 'string') {
        server = new Drowsy.Server(server);
      }
      this.server = server;
      this.name = dbName;
      this.options = options;
      this.url = server.url() + '/' + dbName;
    }

    Database.prototype.collections = function(after) {
      var db,
        _this = this;
      db = this;
      return Backbone.ajax({
        url: this.url,
        success: function(data) {
          var c, collName, colls, _i, _len;
          colls = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            collName = data[_i];
            c = new ((function(_super) {

              __extends(_Class, _super);

              function _Class() {
                return _Class.__super__.constructor.apply(this, arguments);
              }

              return _Class;

            })(db.Collection(collName)));
            colls.push(c);
          }
          return after(colls);
        }
      });
    };

    Database.prototype.Document = function(collectionName) {
      var db;
      db = this;
      return (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.urlRoot = db.url + '/' + collectionName;

        _Class.prototype.collectionName = collectionName;

        return _Class;

      })(Drowsy.Document);
    };

    Database.prototype.Collection = function(collectionName) {
      var db;
      db = this;
      return (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.url = db.url + '/' + collectionName;

        _Class.prototype.name = collectionName;

        return _Class;

      })(Drowsy.Collection);
    };

    return Database;

  })();

  Drowsy.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.prototype.model = Drowsy.Document;

    return Collection;

  })(Backbone.Collection);

  Drowsy.Document = (function(_super) {

    __extends(Document, _super);

    function Document() {
      return Document.__super__.constructor.apply(this, arguments);
    }

    Document.prototype.idAttribute = '_id';

    Document.prototype.initialize = function() {
      if (!this.get(this.idAttribute)) {
        return this.set(this.idAttribute, Drowsy.generateMongoObjectId());
      }
    };

    Document.prototype.parse = function(data) {
      var parsed;
      data._id = data._id.$oid;
      parsed = this.parseObjectRecursively(data, this.jsonToDate);
      return parsed;
    };

    Document.prototype.toJSON = function(options) {
      var data, parsed;
      if (options == null) {
        options = {};
      }
      data = Document.__super__.toJSON.call(this, options);
      parsed = this.parseObjectRecursively(data, this.dateToJson);
      return parsed;
    };

    /* 
    private
    */


    Document.prototype.parseObjectRecursively = function(obj, parser) {
      var key, out, val;
      out = {};
      for (key in obj) {
        val = obj[key];
        out[key] = parser(val);
        if (typeof out[key] === 'object' && Object.keys(out[key]).length > 0) {
          out[key] = this.parseObjectRecursively(out[key], parser);
        }
      }
      return out;
    };

    Document.prototype.jsonToDate = function(val) {
      var date;
      if (val.$date != null) {
        date = new Date(val.$date);
        if (isNaN(date.getTime())) {
          val.$invalid = true;
          return val;
        } else {
          return date;
        }
      } else {
        return val;
      }
    };

    Document.prototype.dateToJson = function(val) {
      if (val instanceof Date) {
        return {
          "$date": val.toJSON()
        };
      } else {
        return val;
      }
    };

    return Document;

  })(Backbone.Model);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Drowsy = Drowsy;

}).call(this);
