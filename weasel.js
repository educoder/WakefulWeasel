// Generated by CoffeeScript 1.7.1
(function() {
  var CONFIG, DrowsyPersistence, MQTTRelay, Weasel, argv, events, faye, fs, http, weasel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  faye = require('faye');

  fs = require('fs');

  events = require('events');

  DrowsyPersistence = require('./drowsy_persistence').DrowsyPersistence;

  MQTTRelay = require('./mqtt_relay').MQTTRelay;

  argv = require('optimist').usage('Usage:\n\t$0 [-c config.json]').argv;

  if (argv.c != null) {
    CONFIG = argv.c;
  } else {
    CONFIG = './config.json';
  }

  Weasel = (function(_super) {
    __extends(Weasel, _super);

    function Weasel() {
      return Weasel.__super__.constructor.apply(this, arguments);
    }

    Weasel.prototype.setupLogging = function() {
      this.bayeux.bind('handshake', function(cid) {
        return console.log("" + (Date.now()) + " [handshk] " + cid);
      });
      this.bayeux.bind('subscribe', function(cid, channel) {
        return console.log("" + (Date.now()) + " [sub       ] " + cid + " " + channel);
      });
      this.bayeux.bind('unsubscribe', function(cid, channel) {
        return console.log("" + (Date.now()) + " [unsub     ] " + cid + " " + channel);
      });
      this.bayeux.bind('publish', function(cid, channel, data) {
        return console.log("" + (Date.now()) + " [pub       ] " + cid + " " + channel, data);
      });
      this.bayeux.bind('disconnect', function(cid, channel, data) {
        return console.log("" + (Date.now()) + " [disconnect] " + cid);
      });
      this.on('drowsy.persist_success', function(cid, channel, data, res) {
        return console.log("" + (Date.now()) + " [drwsy.save] " + cid + " " + channel + " (" + res.statusCode + ")");
      });
      this.on('drowsy.persist_failure', function(cid, channel, data, res) {
        return console.warn("" + (Date.now()) + " [drwsy.fail] " + cid + " " + channel + " (" + res.statusCode + ")");
      });
      this.on('mqtt.connect', (function(_this) {
        return function(brokerUrl, clientOpts) {
          return console.log("" + (Date.now()) + " [mqtt.conn  ] " + brokerUrl, clientOpts);
        };
      })(this));
      this.on('mqtt.receive', (function(_this) {
        return function(topic, payload) {
          return console.log("" + (Date.now()) + " [mqtt.receiv] " + topic, payload);
        };
      })(this));
      this.on('mqtt.pub_success', (function(_this) {
        return function(topic, payload, opts) {
          return console.log("" + (Date.now()) + " [mqtt.pub   ] " + topic, payload, opts);
        };
      })(this));
      this.on('mqtt.sub_success', (function(_this) {
        return function(topic, clientId, opts) {
          return console.log("" + (Date.now()) + " [mqtt.sub   ] " + topic + " " + clientId);
        };
      })(this));
      this.on('mqtt.sub_skip', (function(_this) {
        return function(topic, clientId) {
          return console.log("" + (Date.now()) + " [mqtt.subskp] " + topic + " " + clientId);
        };
      })(this));
      return this.on('mqtt.sub_failure', (function(_this) {
        return function(topic, clientId, opts, err) {
          return console.log("" + (Date.now()) + " [mqtt.suberr] " + topic + " " + clientId, err);
        };
      })(this));
    };

    Weasel.prototype.setupDrowsyPersistence = function() {
      var drowsy;
      if (this.config.drowsy) {
        drowsy = new DrowsyPersistence(this.config.drowsy);
        drowsy.on('persist_success', (function(_this) {
          return function(cid, channel, data, res) {
            return _this.emit('drowsy.persist_success', cid, channel, data, res);
          };
        })(this));
        drowsy.on('persist_failure', (function(_this) {
          return function(cid, channel, data, res) {
            return _this.emit('drowsy.persist_failure', cid, channel, data, res);
          };
        })(this));
        return this.bayeux.addExtension(drowsy);
      } else {
        console.warn("Drowsy persistence will be disabled because no 'drowsy' config was provided.");
      }
    };

    Weasel.prototype.setupMQTTRelay = function() {
      var mqtt;
      if (this.config.mqtt) {
        mqtt = new MQTTRelay(this.config.mqtt, this.bayeux);
        mqtt.on('connect', (function(_this) {
          return function(brokerUrl, clientOpts) {
            return _this.emit('mqtt.connect', brokerUrl, clientOpts);
          };
        })(this));
        mqtt.on('receive', (function(_this) {
          return function(topic, payload) {
            return _this.emit('mqtt.receive', topic, payload);
          };
        })(this));
        mqtt.on('pub_success', (function(_this) {
          return function(topic, payload, opts) {
            return _this.emit('mqtt.pub_success', topic, payload, opts);
          };
        })(this));
        mqtt.on('sub_success', (function(_this) {
          return function(topic, clientId, opts) {
            return _this.emit('mqtt.sub_success', topic, clientId, opts);
          };
        })(this));
        mqtt.on('sub_skip', (function(_this) {
          return function(topic, clientId) {
            return _this.emit('mqtt.sub_skip', topic, clientId);
          };
        })(this));
        mqtt.on('sub_failure', (function(_this) {
          return function(topic, clientId, opts, err) {
            return _this.emit('mqtt.sub_failure', topic, clientId, opts, err);
          };
        })(this));
        return this.bayeux.addExtension(mqtt);
      } else {
        return console.warn("MQTT relay will be disabled because no 'mqtt' config was provided.");
      }
    };

    Weasel.prototype.loadConfig = function() {
      var config, configPath, defaults, key, val;
      defaults = {
        port: 7777,
        mount: '/faye',
        timeout: 30
      };
      configPath = CONFIG;
      if (fs.existsSync(configPath)) {
        config = JSON.parse(fs.readFileSync(configPath));
        for (key in defaults) {
          val = defaults[key];
          if (config[key] == null) {
            config[key] = defaults[key];
          }
        }
        console.log("Configuration loaded from '" + CONFIG + "':", config);
      } else {
        config = defaults;
        console.warn("Configuration file '" + CONFIG + "' not found! Using defaults:", config);
      }
      return this.config = config;
    };

    Weasel.prototype.setupFaye = function() {
      return this.bayeux = new faye.NodeAdapter({
        mount: this.config.mount,
        timeout: this.config.timeout
      });
    };

    Weasel.prototype.start = function() {
      var server;
      server = http.createServer();
      this.bayeux.attach(server);
      server.listen(this.config.port);
      return console.log("... awake and listening on http://localhost:" + this.config.port + this.config.mount);
    };

    return Weasel;

  })(events.EventEmitter);

  console.log("Waking the Weasel...");

  weasel = new Weasel();

  weasel.loadConfig();

  weasel.setupFaye();

  weasel.setupLogging();

  weasel.setupDrowsyPersistence();

  weasel.setupMQTTRelay();

  weasel.start();

}).call(this);
