// Generated by CoffeeScript 1.4.0
(function() {
  var Weasel, events, faye, fs, http, weasel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  http = require('http');

  faye = require('faye');

  fs = require('fs');

  events = require('events');

  Weasel = (function(_super) {

    __extends(Weasel, _super);

    function Weasel() {
      return Weasel.__super__.constructor.apply(this, arguments);
    }

    Weasel.prototype.setupLogging = function() {
      this.bayeux.bind('handshake', function(cid) {
        return console.log("" + (Date.now()) + " O " + cid);
      });
      this.bayeux.bind('subscribe', function(cid, channel) {
        return console.log("" + (Date.now()) + " + " + cid + " " + channel);
      });
      this.bayeux.bind('unsubscribe', function(cid, channel) {
        return console.log("" + (Date.now()) + " - " + cid + " " + channel);
      });
      this.bayeux.bind('publish', function(cid, channel, data) {
        return console.log("" + (Date.now()) + " > " + cid + " " + channel, data);
      });
      this.bayeux.bind('disconnect', function(cid, channel, data) {
        return console.log("" + (Date.now()) + " X " + cid);
      });
      this.on('persist_success', function(cid, channel, data, res) {
        return console.log("" + (Date.now()) + " âˆš " + cid + " " + channel + " (" + res.statusCode + ")");
      });
      return this.on('persist_failure', function(cid, channel, data, res) {
        return console.warn("" + (Date.now()) + " ! " + cid + " " + channel + " (" + res.statusCode + ")");
      });
    };

    Weasel.prototype.setupPersistence = function() {
      var actionMethodMap, drowsy,
        _this = this;
      if (this.config.drowsy) {
        drowsy = this.config.drowsy;
      } else {
        console.warn("Drowsy persistence will be disabled because no 'drowsy' config was provided!");
        return;
      }
      actionMethodMap = {
        create: 'POST',
        update: 'PUT',
        patch: 'PATCH',
        "delete": 'DELETE'
      };
      this.bayeux.bind('publish', function(cid, channel, bcast) {
        var json, req, reqOpts, _ref, _ref1;
        reqOpts = {
          hostname: (_ref = drowsy.hostname) != null ? _ref : 'localhost',
          port: (_ref1 = drowsy.port) != null ? _ref1 : 9292,
          path: channel,
          method: actionMethodMap[bcast.action]
        };
        req = http.request(reqOpts, function(res) {
          var _i, _ref2, _results;
          if (_ref2 = res.statusCode, __indexOf.call((function() {
            _results = [];
            for (_i = 200; _i < 299; _i++){ _results.push(_i); }
            return _results;
          }).apply(this), _ref2) >= 0) {
            return _this.emit('persist_success', cid, channel, bcast, res);
          } else {
            return _this.emit('persist_failure', cid, channel, bcast, res);
          }
        });
        json = JSON.stringify(bcast.data);
        req.setHeader('content-type', 'application/json');
        req.setHeader('content-length', json.length);
        req.write(json);
        return req.end();
      });
      return console.log("Drowsy persistence enabled. Broadcasts will be saved to http://" + drowsy.hostname + ":{drowsy.port} ...");
    };

    Weasel.prototype.loadConfig = function() {
      var config, configPath, defaults, key, val, _ref;
      defaults = {
        port: 7777,
        mount: '/faye',
        timeout: 30
      };
      configPath = './config.json';
      if (fs.existsSync(configPath)) {
        config = JSON.parse(fs.readFileSync(configPath));
        for (key in defaults) {
          val = defaults[key];
          if ((_ref = config[key]) == null) {
            config[key] = defaults[key];
          }
        }
        console.log("config.json loaded:", config);
      } else {
        config = defaults;
        console.warn("config.json not found! Using defaults:", config);
      }
      return this.config = config;
    };

    Weasel.prototype.setupFaye = function() {
      return this.bayeux = new faye.NodeAdapter({
        mount: this.config.mount,
        timeout: this.config.timeout
      });
    };

    Weasel.prototype.start = function() {
      this.bayeux.listen(this.config.port);
      return console.log("... awake and listening on http://localhost:" + this.config.port + this.config.mount);
    };

    return Weasel;

  })(events.EventEmitter);

  console.log("Waking the Weasel...");

  weasel = new Weasel();

  weasel.loadConfig();

  weasel.setupFaye();

  weasel.setupLogging();

  weasel.setupPersistence();

  weasel.start();

}).call(this);
