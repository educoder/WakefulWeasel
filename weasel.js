// Generated by CoffeeScript 1.4.0
(function() {
  var URL, WebSocket, WebSocketServer, mubsub, wss;

  WebSocket = require('ws');

  WebSocketServer = WebSocket.Server;

  URL = require('url');

  mubsub = require('mubsub');

  console.log("Waking the Weasel!");

  wss = new WebSocketServer({
    port: 7777
  });

  wss.on('connection', function(ws) {
    var ack, channel, client, collection, db, id, query, resourceUrl, subscription, url, wid, _ref;
    url = URL.parse(ws.upgradeReq.url);
    console.log("@ " + (URL.format(url)));
    _ref = url.pathname.replace(/^\//, '').split("/"), db = _ref[0], collection = _ref[1], id = _ref[2], wid = _ref[3];
    if ((db != null) && (collection != null) && (id != null)) {
      resourceUrl = "/" + db + "/" + collection + "/" + id;
    } else if ((db != null) && (collection != null)) {
      resourceUrl = "/" + db + "/" + collection;
    } else {
      console.error("! " + url);
    }
    ws.on('message', function(broadcastJSON) {
      var broadcast;
      if (typeof broadcastJSON === 'string') {
        try {
          broadcast = JSON.parse(broadcastJSON);
        } catch (e) {
          console.error("Couldn't parse JSON message: ", broadcastJSON);
          return;
        }
      } else {
        broadcast = broadcastJSON;
      }
      broadcast.docId = broadcast.data._id;
      return channel.publish(broadcast, function() {
        return console.log("> " + resourceUrl, "#" + broadcast.bid, broadcast.action.toUpperCase(), broadcast.data, broadcast.origin);
      });
    });
    client = mubsub("mongodb://localhost:27017/" + db);
    channel = client.channel("" + collection + ".weasel");
    if (id) {
      query = {
        docId: id
      };
    } else {
      query = {};
    }
    subscription = channel.subscribe(query, function(broadcast) {
      var sendUpdate;
      sendUpdate = function() {
        console.log("< " + resourceUrl + "#" + wid, "#" + broadcast.bid, broadcast.action.toUpperCase(), broadcast.data, broadcast.origin);
        return ws.send(JSON.stringify(broadcast));
      };
      if (ws.readyState === WebSocket.OPEN) {
        return sendUpdate();
      } else if (ws.readyState === WebSocket.CONNECTING) {
        return ws.on('open', sendUpdate);
      } else if (ws.readyState === WebSocket.CLOSING) {
        return console.warn("WebSocket is closing; cannot send update!");
      } else if (ws.readyState === WebSocket.CLOSED) {
        return console.warn("WebSocket is closed; cannot send update!");
      } else {
        return console.error("WebSocket is in a weird state!", ws.readyState);
      }
    });
    ws.on('close', function() {
      console.log("X " + resourceUrl + "#" + wid);
      subscription.unsubscribe();
      return client.close();
    });
    ack = {
      status: "SUCCESS",
      url: URL.format(url),
      db: db,
      collection: collection,
      id: id,
      wid: wid
    };
    console.log("S " + resourceUrl + "#" + wid);
    return ws.send(JSON.stringify(ack));
  });

}).call(this);
