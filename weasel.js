// Generated by CoffeeScript 1.4.0
(function() {
  var URL, Weasel, WebSocket, WebSocketServer, events, pubsub, weasel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WebSocket = require('ws');

  WebSocketServer = WebSocket.Server;

  URL = require('url');

  events = require('events');

  Weasel = (function(_super) {

    __extends(Weasel, _super);

    function Weasel(options) {
      var _base, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.options = options;
      if ((_ref = (_base = this.options).port) == null) {
        _base.port = 7777;
      }
      if (options.pubsub != null) {
        this.pubusub = options.pubsub;
      }
      this.logger = (_ref1 = options.logger) != null ? _ref1 : console;
      this.clients = {};
      this.subscribers = {};
    }

    Weasel.prototype.listen = function() {
      var _this = this;
      this.wss = new WebSocketServer({
        port: this.options.port
      });
      this.wss.on('listening', function() {
        return _this.emit('listening');
      });
      return this.wss.on('connection', function(ws) {
        return ws.on('message', function(json) {
          var req;
          req = JSON.parse(json);
          return Weasel.protocol[req.type].call(_this, req, ws);
        });
      });
    };

    Weasel.prototype.stop = function() {
      this.wss.close();
      return this.emit('stopped');
    };

    Weasel.prototype.broadcast = function(rloc, bcast) {
      var cid, send, ws, _i, _len, _ref, _results,
        _this = this;
      bcast.url = rloc.url;
      _ref = this.subscribers[rloc.url];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cid = _ref[_i];
        ws = this.clients[cid];
        send = function() {
          _this.logger.log("< " + rloc.url + "#", "#" + bcast.bid, bcast.action, bcast.data, bcast.origin);
          return ws.send(JSON.stringify(bcast));
        };
        if (ws.readyState === WebSocket.OPEN) {
          _results.push(send());
        } else if (ws.readyState === WebSocket.CONNECTING) {
          _results.push(ws.on('open', send));
        } else if (ws.readyState === WebSocket.CLOSING) {
          _results.push(this.logger.warn("WebSocket is closing; cannot send update!"));
        } else if (ws.readyState === WebSocket.CLOSED) {
          _results.push(this.logger.warn("WebSocket is closed; cannot send update!"));
        } else {
          _results.push(this.logger.error("WebSocket is in a weird state!", ws.readyState));
        }
      }
      return _results;
    };

    Weasel.protocol = {
      PUBLISH: function(req, ws) {
        var bcast, rloc;
        rloc = new Weasel.ResourceLocator(req.url);
        bcast = {
          action: req.action,
          data: req.data
        };
        if (req.bid != null) {
          bcast.bid = req.bid;
        }
        if (req.origin != null) {
          bcast.origin = req.origin;
        }
        this.pubsub.publish(rloc, bcast);
        this.emit('published', rloc, bcast);
        return this.logger.log("> " + rloc.url, bcast);
      },
      SUBSCRIBE: function(req, ws) {
        var rloc,
          _this = this;
        rloc = new Weasel.ResourceLocator(req.url);
        if (this.subscribers[rloc.url] != null) {
          this.subscribers[rloc.url].push(req.cid);
          this.emit('subscribed', req.cid);
          this.logger.log("s " + rloc.url + " " + req.cid);
        } else {
          this.subscribers[rloc.url] = [];
          this.subscribers[rloc.url].push(ws);
          this.emit('subscribed', ws);
          this.pubsub.subscribe(rloc, function(bcast) {
            return _this.broadcast(rloc, bcast);
          });
          this.emit('subscription', rloc);
          this.logger.log("S " + rloc.url + " " + req.cid);
        }
        this.clients[req.cid] = ws;
        return ws.on('close', function() {
          return delete _this.clients[req.cid];
        });
      }
    };

    return Weasel;

  })(events.EventEmitter);

  Weasel.ResourceLocator = (function() {

    function ResourceLocator(url) {
      var collection, db, id, normalizedUrl, parsedUrl, _ref;
      parsedUrl = URL.parse(url);
      _ref = parsedUrl.pathname.replace(/^\//, '').split("/"), db = _ref[0], collection = _ref[1], id = _ref[2];
      if ((db != null) && (collection != null) && (id != null)) {
        normalizedUrl = "/" + db + "/" + collection + "/" + id;
      } else if ((db != null) && (collection != null)) {
        normalizedUrl = "/" + db + "/" + collection;
      } else {
        throw new Error("Invalid resource URL " + originalUrl, originalUrl);
        this.logger.error("! " + originalUrl);
      }
      this.url = normalizedUrl;
      this.db = db;
      this.collection = collection;
      if (id != null) {
        this.id = id;
      }
    }

    ResourceLocator.prototype.toString = function() {
      return this.url;
    };

    return ResourceLocator;

  })();

  exports.Weasel = Weasel;

  if (require.main === module) {
    console.log("Waking the Weasel!");
    pubsub = require('./mubsub');
    weasel = new Weasel({
      pubsub: new pubsub.Mubsub()
    });
    weasel.on('listening', function() {
      return console.log("... now listening on ws://localhost:" + this.options.port);
    });
    weasel.listen();
  }

}).call(this);
