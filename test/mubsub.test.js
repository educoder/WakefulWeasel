// Generated by CoffeeScript 1.4.0
(function() {
  var Deferred, Weasel, randomMongoId, should;

  should = require('chai').should();

  Deferred = require('dfrrd');

  Weasel = require('../weasel').Weasel;

  randomMongoId = function() {
    var id;
    id = "000000000000000000000000" + Math.floor(Math.random() * (0xffffffff - 1)).toString(16);
    return id.substring(id.length - 24);
  };

  xdescribe("pubsub via mubsub", function() {
    this.timeout(6000);
    beforeEach(function() {
      return this.pubsub = require('../mubsub');
    });
    it("should broadcast to all subscribers of doc url", function(done) {
      var dfs1, doc_rid, doc_url, got1, id;
      id = randomMongoId();
      doc_url = "http://test.com/weasel_test/tests/" + id;
      doc_rid = new Weasel.ResourceID(doc_url);
      got1 = [];
      dfs1 = {
        A: new Deferred(),
        B: new Deferred()
      };
      this.pubsub.subscribe(doc_rid, function(broadcast) {
        got1.push(broadcast.data.foo);
        return dfs1[broadcast.data.foo].resolve();
      });
      this.pubsub.publish(doc_rid, {
        data: {
          foo: 'A'
        }
      });
      this.pubsub.publish(doc_rid, {
        data: {
          foo: 'B'
        }
      });
      return $.when(dfs1.A, dfs1.B).then(function() {
        got1.should.include('A');
        got1.should.include('B');
        return done();
      });
    });
    it("should broadcast to all subscribers of collection url", function(done) {
      var coll_rid, coll_url, dfs, doc1_rid, doc1_url, doc2_rid, doc2_url, got, id1, id2;
      id1 = randomMongoId();
      id2 = randomMongoId();
      doc1_url = "http://test.com/weasel_test/tests/" + id1;
      doc1_rid = new Weasel.ResourceID(doc1_url);
      doc2_url = "http://test.com/weasel_test/tests/" + id2;
      doc2_rid = new Weasel.ResourceID(doc2_url);
      coll_url = "http://test.com/weasel_test/tests";
      coll_rid = new Weasel.ResourceID(coll_url);
      dfs = {
        a: new Deferred(),
        b: new Deferred(),
        c: new Deferred(),
        d: new Deferred()
      };
      got = [];
      this.pubsub.subscribe(coll_rid, function(broadcast) {
        got.push(broadcast.data.foo);
        return dfs[broadcast.data.foo].resolve();
      });
      this.pubsub.publish(doc1_rid, {
        data: {
          foo: 'a'
        }
      });
      this.pubsub.publish(doc1_rid, {
        data: {
          foo: 'b'
        }
      });
      this.pubsub.publish(doc2_rid, {
        data: {
          foo: 'c'
        }
      });
      this.pubsub.publish(coll_rid, {
        data: {
          foo: 'd'
        }
      });
      return $.when(dfs.a, dfs.b, dfs.c, dfs.d).then(function() {
        got.should.include('a');
        got.should.include('b');
        got.should.include('c');
        got.should.include('d');
        return done();
      });
    });
    return it("should allow unsubscribing", function(done) {
      var doc_rid, doc_url, id;
      id = randomMongoId();
      doc_url = "http://test.com/weasel_test/tests/" + id;
      doc_rid = new Weasel.ResourceID(doc_url);
      this.pubsub.subscribe(doc_rid, function(broadcast) {});
      this.pubsub.unsubscribe(doc_rid);
      return done();
    });
  });

}).call(this);
