// Generated by CoffeeScript 1.4.0
(function() {
  var $, Backbone, Buffer, DROWSY_URL, Drowsy, TEST_COLLECTION, TEST_DB, WAKEFUL_URL, Wakeful, WebSocket, btoa, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    $ = window.$;
    _ = window._;
    Backbone = window.Backbone;
    Drowsy = window.Drowsy;
    Wakeful = window.Wakeful;
  } else {
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Backbone.$ = $;
    Drowsy = require('../backbone.drowsy').Drowsy;
    Wakeful = require('../wakeful');
    WebSocket = require('ws');
  }

  DROWSY_URL = "http://localhost:9292";

  WAKEFUL_URL = "ws://localhost:7777";

  TEST_DB = 'drowsy_test';

  TEST_COLLECTION = 'tests';

  if ((typeof TEST_USERNAME !== "undefined" && TEST_USERNAME !== null) && (typeof TEST_PASSWORD !== "undefined" && TEST_PASSWORD !== null)) {
    Buffer = require('buffer').Buffer;
    btoa = function(str) {
      return (new Buffer(str || "", "ascii")).toString("base64");
    };
    Backbone.$.ajaxSetup({
      beforeSend: function(xhr) {
        return xhr.setRequestHeader('Authorization', 'Basic ' + btoa(TEST_USERNAME + ':' + TEST_PASSWORD));
      }
    });
  }

  describe('Wakeful', function() {
    return describe(".wake", function() {
      beforeEach(function() {
        var TestDoc;
        this.server = new Drowsy.Server(DROWSY_URL);
        this.db = this.server.database(TEST_DB);
        TestDoc = (function(_super) {

          __extends(TestDoc, _super);

          function TestDoc() {
            return TestDoc.__super__.constructor.apply(this, arguments);
          }

          return TestDoc;

        })(this.db.Document(TEST_COLLECTION));
        return this.TestDoc = TestDoc;
      });
      it('should enhance Drowsy.Document with wakeful functionality', function() {
        var doc;
        doc = new this.TestDoc();
        Wakeful.wake(doc, WAKEFUL_URL);
        doc.should.have.property('connect');
        doc.connect.should.be.a('function');
        doc.should.have.property('disconnect');
        return doc.disconnect.should.be.a('function');
      });
      it('should allow the Drowsy.Document to connect to WakefulWeasel', function(done) {
        var doc;
        doc = new this.TestDoc();
        Wakeful.wake(doc, WAKEFUL_URL);
        doc.connect();
        doc.socket.should.be.an.instanceOf(WebSocket);
        return doc.on('wakeful:connected', function() {
          doc.socket.readyState.should.equal(WebSocket.OPEN);
          return done();
        });
      });
      return describe("#broadcast", function() {
        return it("should send an update from one Drowsy.Document to another Drowsy.Document with the same URL", function(done) {
          var doc1, doc2;
          doc1 = new this.TestDoc();
          doc2 = new this.TestDoc();
          return doc1.save({}, {
            success: function() {
              doc2.set('_id', doc1.id);
              doc2.url().should.equal(doc1.url());
              console.log("Both Docs assigned url the same URL", doc1.url());
              return doc2.save({}, {
                success: function() {
                  var df1, df2;
                  console.log("Both Docs saved");
                  Wakeful.wake(doc1, WAKEFUL_URL);
                  Wakeful.wake(doc2, WAKEFUL_URL);
                  df1 = $.Deferred();
                  df2 = $.Deferred();
                  doc1.on('wakeful:connected', function() {
                    return df1.resolve();
                  });
                  doc2.on('wakeful:connected', function() {
                    return df2.resolve();
                  });
                  $.when(df1, df2).then(function() {
                    var rand;
                    console.log("Both Docs connected to WakefulWeasel");
                    rand = Math.random();
                    doc1.set('foo', rand);
                    doc1.get('foo').should.equal(rand);
                    doc2.has('foo').should.be["false"];
                    doc2.on('change', function() {
                      doc2.get('foo').should.equal(rand);
                      return done();
                    });
                    return doc1.broadcast('update', doc1.toJSON());
                  });
                  doc1.connect();
                  return doc2.connect();
                }
              });
            }
          });
        });
      });
    });
  });

}).call(this);
