// Generated by CoffeeScript 1.4.0
(function() {
  var $, Backbone, Buffer, DROWSY_URL, Drowsy, TEST_COLLECTION, TEST_DB, WAKEFUL_URL, Wakeful, WebSocket, btoa, should, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    $ = window.$;
    _ = window._;
    Backbone = window.Backbone;
    Drowsy = window.Drowsy;
    Wakeful = window.Wakeful;
    WebSocket = window.WebSocket;
  } else {
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Backbone.$ = $;
    Drowsy = require('../backbone.drowsy').Drowsy;
    Wakeful = require('../wakeful').Wakeful;
    should = require('chai').should();
    WebSocket = require('ws');
  }

  DROWSY_URL = "http://localhost:9292";

  WAKEFUL_URL = "ws://localhost:7777";

  TEST_DB = 'drowsy_test';

  TEST_COLLECTION = 'tests';

  if ((typeof TEST_USERNAME !== "undefined" && TEST_USERNAME !== null) && (typeof TEST_PASSWORD !== "undefined" && TEST_PASSWORD !== null)) {
    Buffer = require('buffer').Buffer;
    btoa = function(str) {
      return (new Buffer(str || "", "ascii")).toString("base64");
    };
    Backbone.$.ajaxSetup({
      beforeSend: function(xhr) {
        return xhr.setRequestHeader('Authorization', 'Basic ' + btoa(TEST_USERNAME + ':' + TEST_PASSWORD));
      }
    });
  }

  describe('Wakeful', function() {
    this.timeout(4000);
    this.slow(1000);
    before(function() {
      var TestDoc;
      this.server = new Drowsy.Server(DROWSY_URL);
      this.db = this.server.database(TEST_DB);
      TestDoc = (function(_super) {

        __extends(TestDoc, _super);

        function TestDoc() {
          return TestDoc.__super__.constructor.apply(this, arguments);
        }

        return TestDoc;

      })(this.db.Document(TEST_COLLECTION));
      return this.TestDoc = TestDoc;
    });
    return describe(".wake", function() {
      it('should enhance Drowsy.Document with wakeful functionality', function() {
        var doc;
        doc = new this.TestDoc();
        Wakeful.wake(doc, WAKEFUL_URL);
        doc.should.have.property('connect');
        doc.connect.should.be.a('function');
        doc.should.have.property('disconnect');
        return doc.disconnect.should.be.a('function');
      });
      describe("#connect", function() {
        it('should return a $.Deferred', function() {
          var conn, doc;
          doc = new this.TestDoc();
          Wakeful.wake(doc, WAKEFUL_URL);
          conn = doc.connect();
          conn.should.have.property('resolve');
          conn.resolve.should.be.a('function');
          conn.should.have.property('reject');
          return conn.reject.should.be.a('function');
        });
        return it('should trigger wakeful:open then wakeful:subscribed and then resolve', function(done) {
          var conn, doc;
          doc = new this.TestDoc();
          Wakeful.wake(doc, WAKEFUL_URL);
          conn = doc.connect();
          doc.socket.should.be.an.instanceOf(WebSocket);
          conn.state().should.equal('pending');
          return doc.on('wakeful:open', function() {
            doc.socket.readyState.should.equal(WebSocket.OPEN);
            conn.state().should.equal('pending');
            return doc.on('wakeful:subscribed', function() {
              return conn.done(function() {
                return done();
              });
            });
          });
        });
      });
      return describe("#broadcast", function() {
        return it("should send an update from one Drowsy.Document to another Drowsy.Document with the same URL", function(done) {
          var doc1, doc2;
          doc1 = new this.TestDoc();
          doc2 = new this.TestDoc();
          return doc1.save().done(function() {
            doc2.set('_id', doc1.id);
            doc2.url().should.equal(doc1.url());
            return doc2.save().done(function() {
              var conn1, conn2, sub1, sub2;
              console.log("Doc2 saved");
              Wakeful.wake(doc1, WAKEFUL_URL);
              Wakeful.wake(doc2, WAKEFUL_URL);
              conn1 = doc1.connect();
              conn2 = doc2.connect();
              sub1 = false;
              sub2 = false;
              doc1.on('wakeful:subscribed', function() {
                return sub1 = true;
              });
              doc2.on('wakeful:subscribed', function() {
                return sub2 = true;
              });
              conn1.state().should.equal('pending');
              conn2.state().should.equal('pending');
              return $.when(conn1, conn2).done(function() {
                var bc, rand;
                conn1.state().should.equal('resolved');
                conn2.state().should.equal('resolved');
                sub1.should.be["true"];
                sub2.should.be["true"];
                console.log("Both open");
                rand = Math.random();
                doc1.set('foo', rand);
                doc1.get('foo').should.equal(rand);
                doc2.has('foo').should.be["false"];
                doc1.wid = 'doc1';
                doc2.wid = 'doc2';
                doc2.on('change', function() {
                  console.log("Doc2 changed");
                  doc2.get('foo').should.equal(rand);
                  return done();
                });
                bc = doc1.broadcast('update', doc1.toJSON(), doc1.wid);
                return bc.progress(function(n) {
                  return console.log(n);
                });
              });
            });
          });
        });
      });
    });
  });

}).call(this);
