// Generated by CoffeeScript 1.10.0
(function() {
  var DrowsyPersistence, events, http, httpRequest,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  http = require('http');

  httpRequest = require('request');

  events = require('events');

  DrowsyPersistence = (function(superClass) {
    var actionMethodMap;

    extend(DrowsyPersistence, superClass);

    function DrowsyPersistence(config) {
      this.config = config;
    }

    DrowsyPersistence.prototype.added = function() {
      return console.log("Drowsy persistence enabled. Broadcasts will be saved to " + (this.drowsyUrl()) + " ...");
    };

    DrowsyPersistence.prototype.incoming = function(message, callback) {
      var cb2;
      if (message.channel.match(/^\/meta\//)) {
        return callback(message);
      }
      cb2 = function(message) {
        console.log("Calling callback!");
        return callback(message);
      };
      return this.persistInDrowsy(message, cb2);
    };

    actionMethodMap = {
      create: 'POST',
      update: 'PUT',
      patch: 'PATCH',
      "delete": 'DELETE'
    };

    DrowsyPersistence.prototype.persistInDrowsy = function(message, callback) {
      var baseUri, channel, cid, hostname, path, payload, port, ref, ref1, ref2, reqOpts, scheme;
      cid = message.clientId;
      channel = message.channel;
      payload = message.data;
      if (this.config.uri != null) {
        baseUri = this.config.uri.replace(/\/$/, '');
      } else {
        scheme = (ref = this.config.scheme) != null ? ref : 'http';
        hostname = (ref1 = this.config.hostname) != null ? ref1 : 'localhost';
        port = (ref2 = this.config.port) != null ? ref2 : 9292;
        baseUri = scheme + "://" + hostname + ":" + port;
      }
      path = channel;
      if ((this.config.username != null) && (this.config.password != null)) {
        reqOpts = {
          uri: baseUri + "/" + path,
          method: actionMethodMap[payload.action],
          json: payload.data,
          auth: {
            user: this.config.username,
            pass: this.config.password
          }
        };
      } else {
        reqOpts = {
          uri: baseUri + "/" + path,
          method: actionMethodMap[payload.action],
          json: payload.data
        };
      }
      return httpRequest(reqOpts, (function(_this) {
        return function(err, res, json) {
          var errMsg, i, ref3, results;
          if (err) {
            _this.emit('persist_failure', cid, channel, payload, err);
            errMsg = "\n\n!!! Error while sending request to Drowsy! Is the Drowsy server up and running at " + (_this.drowsyUrl()) + "?\n " + (err.toString());
            console.error(errMsg);
            message.error = errMsg;
            callback(message);
            throw err;
          }
          if (ref3 = res.statusCode, indexOf.call((function() {
            results = [];
            for (i = 200; i < 299; i++){ results.push(i); }
            return results;
          }).apply(this), ref3) >= 0) {
            _this.emit('persist_success', cid, channel, payload, res, json);
          } else {
            _this.emit('persist_failure', cid, channel, payload, res, json);
            message.error = "Failed to persist data in Drowsy; Drowsy responded with a " + res.statusCode;
          }
          return callback(message);
        };
      })(this));
    };

    DrowsyPersistence.prototype.drowsyUrl = function() {
      return this.config.scheme + "://" + this.config.hostname + ":" + this.config.port;
    };

    return DrowsyPersistence;

  })(events.EventEmitter);

  exports.DrowsyPersistence = DrowsyPersistence;

}).call(this);
