// Generated by CoffeeScript 1.4.0
(function() {
  var Deferred, Mubsub, mubsub, weasel;

  mubsub = require('mubsub');

  weasel = require('./weasel');

  Deferred = require('dfrrd');

  Mubsub = (function() {

    function Mubsub(options) {
      var _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.options.host = (_ref = options.host) != null ? _ref : 'localhost';
      this.options.port = (_ref1 = options.port) != null ? _ref1 : 27017;
      this.channels = {};
      this.subs = {};
      this.logger = options.logger;
    }

    Mubsub.prototype.publish = function(rloc, broadcast) {
      var channel, deferredPublish;
      deferredPublish = new Deferred();
      if (rloc.id != null) {
        broadcast.doc_id = rloc.id;
      }
      channel = this.channels["" + rloc.db + "/" + rloc.collection];
      channel.publish(broadcast, function(ev) {
        return deferredPublish.resolve(broadcast);
      });
      return deferredPublish;
    };

    Mubsub.prototype.subscribe = function(rloc, deliver) {
      var channel, channel_key, client, collection, db, id, query, sub, url;
      db = rloc.db, collection = rloc.collection, id = rloc.id, url = rloc.url;
      if (this.subs[url] != null) {
        throw new Error("Cannot subscribe to '" + url + "' because that URL is already subscribed");
      }
      channel_key = "" + rloc.db + "/" + rloc.collection;
      if (this.channels[channel_key] != null) {
        channel = this.channels[channel_key];
      } else {
        client = mubsub("mongodb://" + this.options.host + ":" + this.options.port + "/" + db, {
          w: 0
        });
        channel = client.channel("" + collection + ".wakeful", {
          wait: 1
        });
        this.channels[channel_key] = channel;
      }
      if (id) {
        query = {
          doc_id: id
        };
      } else {
        query = {};
      }
      sub = channel.subscribe(query, deliver);
      return this.subs[url] = sub;
    };

    Mubsub.prototype.unsubscribe = function(rloc) {
      var sub;
      if (!this.subs[rloc.url]) {
        this.logger.warn("Unsubscribing from '" + rloc.url + "' but that URL is not subscribed");
        return;
      }
      sub = this.subs[rloc.url];
      sub.unsubscribe();
      return delete this.subs[rloc.url];
    };

    return Mubsub;

  })();

  exports.Mubsub = Mubsub;

}).call(this);
