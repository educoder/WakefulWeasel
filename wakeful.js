// Generated by CoffeeScript 1.4.0
(function() {
  var $, Backbone, Drowsy, Wakeful, WebSocket, readVal, root, _;

  if (typeof window !== "undefined" && window !== null) {
    $ = window.$;
    _ = window._;
    Backbone = window.Backbone;
    Drowsy = window.Drowsy;
    WebSocket = window.WebSocket;
  } else {
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Backbone.$ = $;
    Drowsy = require('./backbone.drowsy').Drowsy;
    WebSocket = require('ws');
  }

  readVal = function(context, val) {
    if (_.isFunction(val)) {
      return val.call(context);
    } else {
      return val;
    }
  };

  Wakeful = (function() {

    function Wakeful() {}

    Wakeful.clientId = Drowsy.generateMongoObjectId();

    Wakeful.sync = function(method, obj, options) {
      var deferredSync;
      deferredSync = $.Deferred();
      Backbone.sync(method, obj, options).done(function() {
        var data;
        data = obj.toJSON();
        if (method === 'create' || method === 'update' || method === 'patch') {
          obj.broadcast(method, data, options.origin || obj.wid || obj.defaultWid());
        }
        return deferredSync.resolve();
      });
      return deferredSync;
    };

    Wakeful.websockets = {};

    Wakeful.subs = {};

    Wakeful.wake = function(obj, websocketUrl) {
      var deferredConnection, websocket,
        _this = this;
      deferredConnection = $.Deferred();
      if (websocketUrl == null) {
        throw new Error("Must provide a websocketUrl");
      }
      obj.websocketUrl = websocketUrl;
      obj.broadcastEchoQueue = [];
      obj = _.extend(obj, {
        resourceUrl: function() {
          var coll, db, drowsyUrl, id, rx, url, _ref;
          drowsyUrl = readVal(this, this.url);
          rx = new RegExp("[a-z]+://[^/]+/?/(\\w+)/(\\w+)(?:/([0-9a-f]{24}))?");
          _ref = drowsyUrl.match(rx), url = _ref[0], db = _ref[1], coll = _ref[2], id = _ref[3];
          if (id != null) {
            return "/" + db + "/" + coll + "/" + id;
          } else {
            return "/" + db + "/" + coll;
          }
        },
        tunein: function() {
          var deferredSub, sendSubRequest,
            _this = this;
          deferredSub = $.Deferred();
          sendSubRequest = function() {
            var req, resUrl, _base, _ref;
            resUrl = _this.resourceUrl();
            req = {
              type: 'SUBSCRIBE',
              url: resUrl,
              cid: Wakeful.clientId
            };
            _this.websocket.send(JSON.stringify(req));
            if ((_ref = (_base = Wakeful.subs)[resUrl]) == null) {
              _base[resUrl] = [];
            }
            Wakeful.subs[resUrl].push(_this);
            _this.trigger('wakeful:subscription', req);
            return deferredSub.resolve();
          };
          switch (this.websocket.readyState) {
            case WebSocket.OPEN:
              sendSubRequest();
              break;
            case WebSocket.CONNECTING:
              this.websocket.addEventListener('open', sendSubRequest);
              break;
            case WebSocket.CLOSED:
              this.websocket.open();
              this.websocket.addEventListener('open', sendSubRequest);
              break;
            case WebSocket.CLOSING:
              console.warn("WebSocket(" + this.websocket.URL + ") is closing... Cannot send request!");
              break;
            default:
              console.error("WebSocket(" + this.websocket.URL + ") is in a weird state... Cannot send request!", this.websocket.readyState);
          }
          return deferredSub;
        },
        broadcast: function(action, data) {
          var deferredPub, send;
          deferredPub = $.Deferred();
          send = function() {
            var req;
            req = {
              type: 'PUBLISH',
              action: action,
              data: data,
              url: readVal(_this, _this.url)
            };
            _this.broadcastEchoQueue.push(deferredPub);
            _this.websocket.send(JSON.stringify(req));
            _this.trigger('wakeful:broadcast:sent', obj, req);
            return deferredPub.notify('sent');
          };
          switch (_this.websocket.readyState) {
            case WebSocket.OPEN:
              send();
              break;
            case WebSocket.CONNECTING:
              _this.websocket.onopen = send;
              break;
            case WebSocket.CLOSED:
            case WebSocket.CLOSING:
              console.warn("WebSocket(" + _this.websocket.URL + ") is closing or closed... Cannot send request!");
              break;
            default:
              console.error("WebSocket(" + _this.websocket.URL + ") is in a weird state... Cannot send request!", _this.websocket.readyState);
          }
          return deferredPub;
        }
      });
      if (Wakeful.websockets[websocketUrl] != null) {
        obj.websocket = Wakeful.websockets[websocketUrl];
      } else {
        websocket = new WebSocket(websocketUrl);
        obj.websocket = websocket;
        Wakeful.websockets[websocketUrl] = websocket;
        websocket.ensuredClose = function() {
          var deferredClose, onclose,
            _this = this;
          deferredClose = $.Deferred();
          if (this.readyState === WebSocket.CLOSED) {
            deferredClose.resolve();
          } else {
            onclose = function(ev) {
              _this.removeEventListener('close', onclose);
              return deferredClose.resolve();
            };
            this.addEventListener('close', onclose);
            if (this.readyState === WebSocket.OPEN) {
              this.close();
            }
          }
          return deferredClose;
        };
        websocket.onmessage = function(ev) {
          var bcast, echoIndex, echoOf, subObj, _i, _len, _ref, _ref1, _results;
          bcast = JSON.parse(ev.data);
          _ref = Wakeful.subs[bcast.url];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            subObj = _ref[_i];
            subObj.trigger('wakeful:broadcast:received', bcast);
            echoOf = _.find(subObj.broadcastEchoQueue, function(b) {
              return b.bid === bcast.bid;
            });
            if (echoOf != null) {
              echoIndex = _.indexOf(subObj.broadcastEchoQueue, echoOf);
              subObj.broadcastEchoQueue.splice(echoIndex, 1);
              echoOf.resolve();
            }
            if ((_ref1 = bcast.action) === 'update' || _ref1 === 'patch' || _ref1 === 'create') {
              _results.push(subObj.set(bcast.data));
            } else {
              _results.push(console.warn("Don't know how to handle broadcast with action", bcast.action));
            }
          }
          return _results;
        };
      }
      if (obj.websocket.readyState === WebSocket.OPEN) {
        console.log("resolving right away");
        deferredConnection.resolve();
      } else {
        obj.websocket.addEventListener('open', function(ev) {
          deferredConnection.resolve();
          return obj.websocket.removeEventListener('open', this);
        });
        obj.websocket.addEventListener('error', function(ev) {
          console.error(ev);
          deferredConnection.reject(ev);
          return obj.websocket.removeEventListener('error', this);
        });
        obj.websocket.open();
      }
      obj.websocket.addEventListener('close', function(ev) {
        console.warn("Wakeful WebSocket closed for", obj.resourceUrl(), ev);
        return obj.websocket.removeEventListener('close');
      });
      obj.sync = Wakeful.sync;
      return deferredConnection;
    };

    return Wakeful;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Wakeful = Wakeful;

}).call(this);
