// Generated by CoffeeScript 1.4.0
(function() {
  var $, Backbone, root, sync, wake, _;

  if (typeof window !== "undefined" && window !== null) {
    $ = window.$;
    _ = window._;
    Backbone = window.Backbone;
  } else {
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Backbone.$ = $;
  }

  sync = function(method, obj, options) {
    options.success = function(data, status, xhr) {
      if (method === 'create' || method === 'update' || method === 'patch') {
        obj.broadcast(method, data, options.origin);
      }
      if (options.success != null) {
        return options.success(data, status, xhr);
      }
    };
    return Backbone.sync();
  };

  wake = function(obj, wakefulUrl) {
    return obj.extend({
      sync: sync,
      connect: function() {
        var baseRx, fullRx,
          _this = this;
        baseRx = "^wss?://[^/]+";
        fullRx = "" + baseRx + "/\\w+/\\w+(/[0-9a-f]+)?";
        if (wakefulUrl.match(new RegExp("" + baseRx + "/?$"))) {
          this.socketUrl = this.url().replace(new RegExp("[a-z]+://[^/]+/?"), "/" + wakefulUrl);
        } else if (wakefulUrl.match(new RegExp(fullRx))) {
          this.socketUrl = wakefulUrl;
        } else {
          console.error(wakefulUrl, "is not a valid WakefulWeasel WebSocket URL!");
          throw "Invalid WakefulWeasel WebSocket URL!";
        }
        if ((this.socket != null) && this.socket.URL === this.socketUrl) {
          this.socket.connect();
          return this.socket;
        }
        this.socket = new WebSocket(this.socketUrl);
        this.socket.onmessage = function(json) {
          var broadcast, _ref;
          broadcast = JSON.parse(json);
          if ((_ref = broadcast.action) === 'update' || _ref === 'patch') {
            return _this.set(broadcast.data);
          } else {
            console.warn("Don't know how to handle broadcast with action", broadcast.action);
          }
        };
        return this.socket;
      },
      disconnect: function() {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
          return this.socket.close;
        }
      },
      broadcast: function(action, data, origin) {
        var send;
        if (origin == null) {
          origin = this.origin;
        }
        console.log("Broadcasting", action, ":", data);
        send = function() {
          var broadcast;
          broadcast = {
            action: action,
            data: data
          };
          if (origin != null) {
            broadcast.origin = origin;
          }
          return this.socket.send(JSON.stringify(broadcast));
        };
        switch (this.socket.readyState) {
          case WebSocket.OPEN:
            return send();
          case WebSocket.CONNECTING:
            return this.socket.onopen = send;
          case WebSocket.CLOSED:
          case WebSocket.CLOSING:
            return console.warn("WebSocket(" + this.socket.URL + ") is closing or closed... Cannot broadcast!");
          default:
            return console.error("WebSocket(" + this.socket.URL + ") is in a weird state... Cannot broadcast!", this.socket.readyState);
        }
      }
    });
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.wake = wake;

  root.sync = sync;

}).call(this);
